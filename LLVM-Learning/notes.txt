
TO DO 

- Complete LLVM tutorial 
- Implement pretty printing 

How does the visitor design pattern work?

accept method takes visitor class name in
then we do that class's name.__ to route to the specific subclass's implementation

// In a nutshell
subclass.accept(VisitorClass) { 
	visitorClass.visit(subClass) 
}

TRACING 

Input = '3+4'

1. getNextToken() 
-> currtok = gettok() = tok_number, NumVal=3;

2. MainLoop()
-> HandleTopLevelExpression();
	-> ParseTopLevelExpr();
		-> ParseExpression() BELOW <- return LHS (BinaryExprAST)	
		-> Make anonymous proto...
		-> Return <FunctionAST>(anon_proto, body(LHS))
	-> Apply Visitor Design Pattern

ParseExpression() 
-> LHS = ParsePrimary()
	-> ParseNumberExpr() = [NumberExprAST]
-> ParseBinOpRHS(0, LHS=[NumberExprAST]) // Pratt Parsing Loop
	-> 20 < 0, False, proceed 
	-> eat operator, curtok = tok_number
	-> RHS = ParsePrimary() = [NumberExprAST];
	-> LOOP ENTER, 20 < -1, fail to enter loop 
	-> LHS = BinaryExprAST((int)'+', LHS, RHS)
	-> return LHS

ParsePrimary() 
-> ParseNumberExpr() -> [NumberExprAST]


Pretty printing should print 
BinaryExprAST
	



